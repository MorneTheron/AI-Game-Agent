import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.ImageIcon;

/**
 * @author Johhny
 *
 */
public class GameMap {

    private int dx;
    private int dy;
    private int x = 0;
    private int Row = 0 ;
    private int y = 0;
    private int Col = 0;
    private int w;
    private int h;
    private int BlockSize = 25;
    private Image image;
    private long lastPressProcessed = 0;
    private int GoalRow = -1 ; 
    private int GoalCol = -1 ; 
    
    
    private Blocks[][] GameMap ;

    public GameMap() {

    	GameMap = new Blocks[30][30] ;
    	GenerateMap("TrainMap.txt") ;
        loadPlayer();
    }

    private void loadPlayer() {
        
        ImageIcon ii = new ImageIcon("data/agent.png");
        image = ii.getImage(); 
        
        
        w = image.getWidth(null);
        h = image.getHeight(null);
    }
    
    private void GenerateMap(String TrainMap)
    {
    	
    	File file = new File("data/TrainMap.txt"); 
    	String st; 
    	BufferedReader br;
    	ArrayList<String> Percepts = new ArrayList<String>();
    	Percepts.add("none") ;
		try {
			br = new BufferedReader(new FileReader(file));
			for(int r = 0 ; r <30; r++)
			{
			if ((st = br.readLine()) != null) 
			  {
			    System.out.println(st); 
			    for(int c = 0 ; c < 30 ; c++)
	    		{
			    	switch (st.charAt(c)) {
					case '8':
						GameMap[r][c] = new Blocks(false,8,-1,Percepts,"data/wall.png");
						break;
					case '2':
						GameMap[r][c] = new Blocks(false,2,-1,Percepts,"data/enimy.png");
						UpdatePercepts(r,c,1,"toxic");
						UpdatePercepts(r,c,1,"feeling weird");
						break;
					case '3':
						GameMap[r][c] = new Blocks(false,3,-1,Percepts,"data/enimy.png");
						UpdatePercepts(r,c,1,"horible smell");
						UpdatePercepts(r,c,2,"somewhat smelly");
						break;
					case '4':
						GameMap[r][c] = new Blocks(false,4,-1,Percepts,"data/treasure.png");
						UpdatePercepts(r,c,1,"very shiny");
						//UpdatePercepts(r,c,2,"sparkling");
						GoalCol = c ;
						GoalRow = r ;
						break;

					default:
						GameMap[r][c] = new Blocks(false,0,-1,Percepts,"data/empty.png");
						break;
					}
	    			
	    		}
			  }
			}
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} 
    }

    public int getX() {
        
        return x;
    }

    public int getY() {
        
        return y;
    }
    
    public int getWidth() {
        
        return w;
    }
    
    public int getHeight() {
        
        return h;
    }    

    public Image getImage() {
        
        return image;
    }
    
    public int getGoalRow() {
		return GoalRow;
	}

	public void setGoalRow(int goalRow) {
		GoalRow = goalRow;
	}

	public int getGoalCol() {
		return GoalCol;
	}

	public void setGoalCol(int goalCol) {
		GoalCol = goalCol;
	}
	
	private void UpdatePercepts(int R, int C, int Rad, String Percept)
	{
		for(int r = (R - Rad); r< (R+Rad); r++)
		{
			if(r>= 0 | r<=26)
			{
				for(int c = (C - Rad); c< (C+Rad); c++)
				{
					if(c>= 0 | c<=29)
					{				
						GameMap[r][c].addPercept(Percept);
					}
				}
			}
		}
	}
	
	public boolean DetermineGoalState()
	{
		if(Col == GoalCol && Row == GoalRow)
		{
		return true;
		}
		return false;
	}

	public void keyPressed(KeyEvent e) {
        
		if(DetermineGoalState() == false)
		{
        int key = e.getKeyCode();

        if (key == KeyEvent.VK_LEFT) {
        	if(DetectCollision(Row, Col - 1)  == false)
        	{
        	x = x - 30;	
        	Col = Col - 1;
        	}
            
        }

        if (key == KeyEvent.VK_RIGHT) {
        	if(DetectCollision(Row, Col + 1) == false)
        	{
            x = x + 30;
            Col = Col +1;
        	}
        }

        if (key == KeyEvent.VK_UP) {
        	if(DetectCollision(Row - 1, Col)  == false)
        	{
            y = y -30;
            Row = Row - 1;
        	}
        }

        if (key == KeyEvent.VK_DOWN) {
        	if(DetectCollision(Row + 1, Col)  == false)
        	{
            y = y + 30;
            Row = Row + 1;
        	}
        }
		}

    }

    public void keyReleased(KeyEvent e) {
        
        int key = e.getKeyCode();

        if (key == KeyEvent.VK_LEFT) {
            dx = 0;
        }

        if (key == KeyEvent.VK_RIGHT) {
            dx = 0;
        }

        if (key == KeyEvent.VK_UP) {
            dy = 0;
        }

        if (key == KeyEvent.VK_DOWN) {
            dy = 0;
        }
    }
    
    public boolean DetectCollision(int Row, int Col)
    {
    	if(Row < 0 | Row >26 | Col < 0 | Col>29)
    	{
    		return true;
    	}
    	if(GameMap[Row][Col].getType() == 8 )
    	{
    		return true;
    	}
		return false;
    	
    }

	public Blocks[][] getGameMap() {
		return GameMap;
	}

	public void setGameMap(Blocks[][] gameMap) {
		GameMap = gameMap;
	}
    
    
}